// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cel/expr/checked.proto
// Protobuf Java Version: 4.29.3

package dev.cel.expr;

public interface DeclOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cel.expr.Decl)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `cel.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][cel.expr.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][cel.expr.Expr].
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `cel.expr.Decl`.
   *
   * Declarations used as
   * [FunctionDecl.Overload][cel.expr.Decl.FunctionDecl.Overload]
   * parameters may or may not have a name depending on whether the overload is
   * function declaration or a function definition containing a result
   * [Expr][cel.expr.Expr].
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.IdentDecl ident = 2;</code>
   * @return Whether the ident field is set.
   */
  boolean hasIdent();
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.IdentDecl ident = 2;</code>
   * @return The ident.
   */
  dev.cel.expr.Decl.IdentDecl getIdent();
  /**
   * <pre>
   * Identifier declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.IdentDecl ident = 2;</code>
   */
  dev.cel.expr.Decl.IdentDeclOrBuilder getIdentOrBuilder();

  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.FunctionDecl function = 3;</code>
   * @return Whether the function field is set.
   */
  boolean hasFunction();
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.FunctionDecl function = 3;</code>
   * @return The function.
   */
  dev.cel.expr.Decl.FunctionDecl getFunction();
  /**
   * <pre>
   * Function declaration.
   * </pre>
   *
   * <code>.cel.expr.Decl.FunctionDecl function = 3;</code>
   */
  dev.cel.expr.Decl.FunctionDeclOrBuilder getFunctionOrBuilder();

  dev.cel.expr.Decl.DeclKindCase getDeclKindCase();
}
