// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/api/expr/v1alpha1/checked.proto
// Protobuf Java Version: 4.29.3

package com.google.api.expr.v1alpha1;

/**
 * <pre>
 * A CEL expression which has been successfully type checked.
 * </pre>
 *
 * Protobuf type {@code google.api.expr.v1alpha1.CheckedExpr}
 */
public final class CheckedExpr extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.CheckedExpr)
    CheckedExprOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      CheckedExpr.class.getName());
  }
  // Use CheckedExpr.newBuilder() to construct.
  private CheckedExpr(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private CheckedExpr() {
    exprVersion_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 2:
        return internalGetReferenceMap();
      case 3:
        return internalGetTypeMap();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.expr.v1alpha1.CheckedExpr.class, com.google.api.expr.v1alpha1.CheckedExpr.Builder.class);
  }

  private int bitField0_;
  public static final int REFERENCE_MAP_FIELD_NUMBER = 2;
  private static final class ReferenceMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, com.google.api.expr.v1alpha1.Reference> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, com.google.api.expr.v1alpha1.Reference>newDefaultInstance(
                com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_ReferenceMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.api.expr.v1alpha1.Reference.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Long, com.google.api.expr.v1alpha1.Reference> referenceMap_;
  private com.google.protobuf.MapField<java.lang.Long, com.google.api.expr.v1alpha1.Reference>
  internalGetReferenceMap() {
    if (referenceMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ReferenceMapDefaultEntryHolder.defaultEntry);
    }
    return referenceMap_;
  }
  public int getReferenceMapCount() {
    return internalGetReferenceMap().getMap().size();
  }
  /**
   * <pre>
   * A map from expression ids to resolved references.
   *
   * The following entries are in this table:
   *
   * - An Ident or Select expression is represented here if it resolves to a
   * declaration. For instance, if `a.b.c` is represented by
   * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
   * while `c` is a field selection, then the reference is attached to the
   * nested select expression (but not to the id or or the outer select).
   * In turn, if `a` resolves to a declaration and `b.c` are field selections,
   * the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   * called.
   * - Every CreateStruct expression for a message has an entry, identifying
   * the message.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
   */
  @java.lang.Override
  public boolean containsReferenceMap(
      long key) {

    return internalGetReferenceMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getReferenceMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> getReferenceMap() {
    return getReferenceMapMap();
  }
  /**
   * <pre>
   * A map from expression ids to resolved references.
   *
   * The following entries are in this table:
   *
   * - An Ident or Select expression is represented here if it resolves to a
   * declaration. For instance, if `a.b.c` is represented by
   * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
   * while `c` is a field selection, then the reference is attached to the
   * nested select expression (but not to the id or or the outer select).
   * In turn, if `a` resolves to a declaration and `b.c` are field selections,
   * the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   * called.
   * - Every CreateStruct expression for a message has an entry, identifying
   * the message.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> getReferenceMapMap() {
    return internalGetReferenceMap().getMap();
  }
  /**
   * <pre>
   * A map from expression ids to resolved references.
   *
   * The following entries are in this table:
   *
   * - An Ident or Select expression is represented here if it resolves to a
   * declaration. For instance, if `a.b.c` is represented by
   * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
   * while `c` is a field selection, then the reference is attached to the
   * nested select expression (but not to the id or or the outer select).
   * In turn, if `a` resolves to a declaration and `b.c` are field selections,
   * the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   * called.
   * - Every CreateStruct expression for a message has an entry, identifying
   * the message.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
   */
  @java.lang.Override
  public /* nullable */
com.google.api.expr.v1alpha1.Reference getReferenceMapOrDefault(
      long key,
      /* nullable */
com.google.api.expr.v1alpha1.Reference defaultValue) {

    java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> map =
        internalGetReferenceMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map from expression ids to resolved references.
   *
   * The following entries are in this table:
   *
   * - An Ident or Select expression is represented here if it resolves to a
   * declaration. For instance, if `a.b.c` is represented by
   * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
   * while `c` is a field selection, then the reference is attached to the
   * nested select expression (but not to the id or or the outer select).
   * In turn, if `a` resolves to a declaration and `b.c` are field selections,
   * the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   * called.
   * - Every CreateStruct expression for a message has an entry, identifying
   * the message.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Reference getReferenceMapOrThrow(
      long key) {

    java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> map =
        internalGetReferenceMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int TYPE_MAP_FIELD_NUMBER = 3;
  private static final class TypeMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, com.google.api.expr.v1alpha1.Type> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, com.google.api.expr.v1alpha1.Type>newDefaultInstance(
                com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_TypeMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.api.expr.v1alpha1.Type.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Long, com.google.api.expr.v1alpha1.Type> typeMap_;
  private com.google.protobuf.MapField<java.lang.Long, com.google.api.expr.v1alpha1.Type>
  internalGetTypeMap() {
    if (typeMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TypeMapDefaultEntryHolder.defaultEntry);
    }
    return typeMap_;
  }
  public int getTypeMapCount() {
    return internalGetTypeMap().getMap().size();
  }
  /**
   * <pre>
   * A map from expression ids to types.
   *
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
   */
  @java.lang.Override
  public boolean containsTypeMap(
      long key) {

    return internalGetTypeMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTypeMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> getTypeMap() {
    return getTypeMapMap();
  }
  /**
   * <pre>
   * A map from expression ids to types.
   *
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> getTypeMapMap() {
    return internalGetTypeMap().getMap();
  }
  /**
   * <pre>
   * A map from expression ids to types.
   *
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
   */
  @java.lang.Override
  public /* nullable */
com.google.api.expr.v1alpha1.Type getTypeMapOrDefault(
      long key,
      /* nullable */
com.google.api.expr.v1alpha1.Type defaultValue) {

    java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> map =
        internalGetTypeMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map from expression ids to types.
   *
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   * </pre>
   *
   * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Type getTypeMapOrThrow(
      long key) {

    java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> map =
        internalGetTypeMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int SOURCE_INFO_FIELD_NUMBER = 5;
  private com.google.api.expr.v1alpha1.SourceInfo sourceInfo_;
  /**
   * <pre>
   * The source info derived from input that generated the parsed `expr` and
   * any optimizations made during the type-checking pass.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
   * @return Whether the sourceInfo field is set.
   */
  @java.lang.Override
  public boolean hasSourceInfo() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The source info derived from input that generated the parsed `expr` and
   * any optimizations made during the type-checking pass.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
   * @return The sourceInfo.
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.SourceInfo getSourceInfo() {
    return sourceInfo_ == null ? com.google.api.expr.v1alpha1.SourceInfo.getDefaultInstance() : sourceInfo_;
  }
  /**
   * <pre>
   * The source info derived from input that generated the parsed `expr` and
   * any optimizations made during the type-checking pass.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.SourceInfoOrBuilder getSourceInfoOrBuilder() {
    return sourceInfo_ == null ? com.google.api.expr.v1alpha1.SourceInfo.getDefaultInstance() : sourceInfo_;
  }

  public static final int EXPR_VERSION_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private volatile java.lang.Object exprVersion_ = "";
  /**
   * <pre>
   * The expr version indicates the major / minor version number of the `expr`
   * representation.
   *
   * The most common reason for a version change will be to indicate to the CEL
   * runtimes that transformations have been performed on the expr during static
   * analysis. In some cases, this will save the runtime the work of applying
   * the same or similar transformations prior to evaluation.
   * </pre>
   *
   * <code>string expr_version = 6;</code>
   * @return The exprVersion.
   */
  @java.lang.Override
  public java.lang.String getExprVersion() {
    java.lang.Object ref = exprVersion_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      exprVersion_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The expr version indicates the major / minor version number of the `expr`
   * representation.
   *
   * The most common reason for a version change will be to indicate to the CEL
   * runtimes that transformations have been performed on the expr during static
   * analysis. In some cases, this will save the runtime the work of applying
   * the same or similar transformations prior to evaluation.
   * </pre>
   *
   * <code>string expr_version = 6;</code>
   * @return The bytes for exprVersion.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getExprVersionBytes() {
    java.lang.Object ref = exprVersion_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      exprVersion_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EXPR_FIELD_NUMBER = 4;
  private com.google.api.expr.v1alpha1.Expr expr_;
  /**
   * <pre>
   * The checked expression. Semantically equivalent to the parsed `expr`, but
   * may have structural differences.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
   * @return Whether the expr field is set.
   */
  @java.lang.Override
  public boolean hasExpr() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The checked expression. Semantically equivalent to the parsed `expr`, but
   * may have structural differences.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
   * @return The expr.
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Expr getExpr() {
    return expr_ == null ? com.google.api.expr.v1alpha1.Expr.getDefaultInstance() : expr_;
  }
  /**
   * <pre>
   * The checked expression. Semantically equivalent to the parsed `expr`, but
   * may have structural differences.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.ExprOrBuilder getExprOrBuilder() {
    return expr_ == null ? com.google.api.expr.v1alpha1.Expr.getDefaultInstance() : expr_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessage
      .serializeLongMapTo(
        output,
        internalGetReferenceMap(),
        ReferenceMapDefaultEntryHolder.defaultEntry,
        2);
    com.google.protobuf.GeneratedMessage
      .serializeLongMapTo(
        output,
        internalGetTypeMap(),
        TypeMapDefaultEntryHolder.defaultEntry,
        3);
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getExpr());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getSourceInfo());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(exprVersion_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 6, exprVersion_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.Long, com.google.api.expr.v1alpha1.Reference> entry
         : internalGetReferenceMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Reference>
      referenceMap__ = ReferenceMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, referenceMap__);
    }
    for (java.util.Map.Entry<java.lang.Long, com.google.api.expr.v1alpha1.Type> entry
         : internalGetTypeMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Type>
      typeMap__ = TypeMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, typeMap__);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getExpr());
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getSourceInfo());
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(exprVersion_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(6, exprVersion_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.api.expr.v1alpha1.CheckedExpr)) {
      return super.equals(obj);
    }
    com.google.api.expr.v1alpha1.CheckedExpr other = (com.google.api.expr.v1alpha1.CheckedExpr) obj;

    if (!internalGetReferenceMap().equals(
        other.internalGetReferenceMap())) return false;
    if (!internalGetTypeMap().equals(
        other.internalGetTypeMap())) return false;
    if (hasSourceInfo() != other.hasSourceInfo()) return false;
    if (hasSourceInfo()) {
      if (!getSourceInfo()
          .equals(other.getSourceInfo())) return false;
    }
    if (!getExprVersion()
        .equals(other.getExprVersion())) return false;
    if (hasExpr() != other.hasExpr()) return false;
    if (hasExpr()) {
      if (!getExpr()
          .equals(other.getExpr())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetReferenceMap().getMap().isEmpty()) {
      hash = (37 * hash) + REFERENCE_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetReferenceMap().hashCode();
    }
    if (!internalGetTypeMap().getMap().isEmpty()) {
      hash = (37 * hash) + TYPE_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTypeMap().hashCode();
    }
    if (hasSourceInfo()) {
      hash = (37 * hash) + SOURCE_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getSourceInfo().hashCode();
    }
    hash = (37 * hash) + EXPR_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + getExprVersion().hashCode();
    if (hasExpr()) {
      hash = (37 * hash) + EXPR_FIELD_NUMBER;
      hash = (53 * hash) + getExpr().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.api.expr.v1alpha1.CheckedExpr parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.api.expr.v1alpha1.CheckedExpr parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.expr.v1alpha1.CheckedExpr parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.expr.v1alpha1.CheckedExpr prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A CEL expression which has been successfully type checked.
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.CheckedExpr}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.CheckedExpr)
      com.google.api.expr.v1alpha1.CheckedExprOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 2:
          return internalGetReferenceMap();
        case 3:
          return internalGetTypeMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableReferenceMap();
        case 3:
          return internalGetMutableTypeMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.expr.v1alpha1.CheckedExpr.class, com.google.api.expr.v1alpha1.CheckedExpr.Builder.class);
    }

    // Construct using com.google.api.expr.v1alpha1.CheckedExpr.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getSourceInfoFieldBuilder();
        getExprFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableReferenceMap().clear();
      internalGetMutableTypeMap().clear();
      sourceInfo_ = null;
      if (sourceInfoBuilder_ != null) {
        sourceInfoBuilder_.dispose();
        sourceInfoBuilder_ = null;
      }
      exprVersion_ = "";
      expr_ = null;
      if (exprBuilder_ != null) {
        exprBuilder_.dispose();
        exprBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.expr.v1alpha1.DeclProto.internal_static_google_api_expr_v1alpha1_CheckedExpr_descriptor;
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.CheckedExpr getDefaultInstanceForType() {
      return com.google.api.expr.v1alpha1.CheckedExpr.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.CheckedExpr build() {
      com.google.api.expr.v1alpha1.CheckedExpr result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.CheckedExpr buildPartial() {
      com.google.api.expr.v1alpha1.CheckedExpr result = new com.google.api.expr.v1alpha1.CheckedExpr(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.api.expr.v1alpha1.CheckedExpr result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.referenceMap_ = internalGetReferenceMap().build(ReferenceMapDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.typeMap_ = internalGetTypeMap().build(TypeMapDefaultEntryHolder.defaultEntry);
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.sourceInfo_ = sourceInfoBuilder_ == null
            ? sourceInfo_
            : sourceInfoBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.exprVersion_ = exprVersion_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.expr_ = exprBuilder_ == null
            ? expr_
            : exprBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.expr.v1alpha1.CheckedExpr) {
        return mergeFrom((com.google.api.expr.v1alpha1.CheckedExpr)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.expr.v1alpha1.CheckedExpr other) {
      if (other == com.google.api.expr.v1alpha1.CheckedExpr.getDefaultInstance()) return this;
      internalGetMutableReferenceMap().mergeFrom(
          other.internalGetReferenceMap());
      bitField0_ |= 0x00000001;
      internalGetMutableTypeMap().mergeFrom(
          other.internalGetTypeMap());
      bitField0_ |= 0x00000002;
      if (other.hasSourceInfo()) {
        mergeSourceInfo(other.getSourceInfo());
      }
      if (!other.getExprVersion().isEmpty()) {
        exprVersion_ = other.exprVersion_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasExpr()) {
        mergeExpr(other.getExpr());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Reference>
              referenceMap__ = input.readMessage(
                  ReferenceMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableReferenceMap().ensureBuilderMap().put(
                  referenceMap__.getKey(), referenceMap__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Type>
              typeMap__ = input.readMessage(
                  TypeMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableTypeMap().ensureBuilderMap().put(
                  typeMap__.getKey(), typeMap__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getSourceInfoFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 42
            case 50: {
              exprVersion_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private static final class ReferenceMapConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder, com.google.api.expr.v1alpha1.Reference> {
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Reference build(com.google.api.expr.v1alpha1.ReferenceOrBuilder val) {
        if (val instanceof com.google.api.expr.v1alpha1.Reference) { return (com.google.api.expr.v1alpha1.Reference) val; }
        return ((com.google.api.expr.v1alpha1.Reference.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Reference> defaultEntry() {
        return ReferenceMapDefaultEntryHolder.defaultEntry;
      }
    };
    private static final ReferenceMapConverter referenceMapConverter = new ReferenceMapConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder, com.google.api.expr.v1alpha1.Reference, com.google.api.expr.v1alpha1.Reference.Builder> referenceMap_;
    private com.google.protobuf.MapFieldBuilder<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder, com.google.api.expr.v1alpha1.Reference, com.google.api.expr.v1alpha1.Reference.Builder>
        internalGetReferenceMap() {
      if (referenceMap_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(referenceMapConverter);
      }
      return referenceMap_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder, com.google.api.expr.v1alpha1.Reference, com.google.api.expr.v1alpha1.Reference.Builder>
        internalGetMutableReferenceMap() {
      if (referenceMap_ == null) {
        referenceMap_ = new com.google.protobuf.MapFieldBuilder<>(referenceMapConverter);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return referenceMap_;
    }
    public int getReferenceMapCount() {
      return internalGetReferenceMap().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    @java.lang.Override
    public boolean containsReferenceMap(
        long key) {

      return internalGetReferenceMap().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getReferenceMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> getReferenceMap() {
      return getReferenceMapMap();
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> getReferenceMapMap() {
      return internalGetReferenceMap().getImmutableMap();
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    @java.lang.Override
    public /* nullable */
com.google.api.expr.v1alpha1.Reference getReferenceMapOrDefault(
        long key,
        /* nullable */
com.google.api.expr.v1alpha1.Reference defaultValue) {

      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder> map = internalGetMutableReferenceMap().ensureBuilderMap();
      return map.containsKey(key) ? referenceMapConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Reference getReferenceMapOrThrow(
        long key) {

      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder> map = internalGetMutableReferenceMap().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return referenceMapConverter.build(map.get(key));
    }
    public Builder clearReferenceMap() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableReferenceMap().clear();
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    public Builder removeReferenceMap(
        long key) {

      internalGetMutableReferenceMap().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference>
        getMutableReferenceMap() {
      bitField0_ |= 0x00000001;
      return internalGetMutableReferenceMap().ensureMessageMap();
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    public Builder putReferenceMap(
        long key,
        com.google.api.expr.v1alpha1.Reference value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableReferenceMap().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    public Builder putAllReferenceMap(
        java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Reference> values) {
      for (java.util.Map.Entry<java.lang.Long, com.google.api.expr.v1alpha1.Reference> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableReferenceMap().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to resolved references.
     *
     * The following entries are in this table:
     *
     * - An Ident or Select expression is represented here if it resolves to a
     * declaration. For instance, if `a.b.c` is represented by
     * `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
     * while `c` is a field selection, then the reference is attached to the
     * nested select expression (but not to the id or or the outer select).
     * In turn, if `a` resolves to a declaration and `b.c` are field selections,
     * the reference is attached to the ident expression.
     * - Every Call expression has an entry here, identifying the function being
     * called.
     * - Every CreateStruct expression for a message has an entry, identifying
     * the message.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Reference&gt; reference_map = 2;</code>
     */
    public com.google.api.expr.v1alpha1.Reference.Builder putReferenceMapBuilderIfAbsent(
        long key) {
      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.ReferenceOrBuilder> builderMap = internalGetMutableReferenceMap().ensureBuilderMap();
      com.google.api.expr.v1alpha1.ReferenceOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = com.google.api.expr.v1alpha1.Reference.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof com.google.api.expr.v1alpha1.Reference) {
        entry = ((com.google.api.expr.v1alpha1.Reference) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.api.expr.v1alpha1.Reference.Builder) entry;
    }

    private static final class TypeMapConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder, com.google.api.expr.v1alpha1.Type> {
      @java.lang.Override
      public com.google.api.expr.v1alpha1.Type build(com.google.api.expr.v1alpha1.TypeOrBuilder val) {
        if (val instanceof com.google.api.expr.v1alpha1.Type) { return (com.google.api.expr.v1alpha1.Type) val; }
        return ((com.google.api.expr.v1alpha1.Type.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.Long, com.google.api.expr.v1alpha1.Type> defaultEntry() {
        return TypeMapDefaultEntryHolder.defaultEntry;
      }
    };
    private static final TypeMapConverter typeMapConverter = new TypeMapConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder, com.google.api.expr.v1alpha1.Type, com.google.api.expr.v1alpha1.Type.Builder> typeMap_;
    private com.google.protobuf.MapFieldBuilder<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder, com.google.api.expr.v1alpha1.Type, com.google.api.expr.v1alpha1.Type.Builder>
        internalGetTypeMap() {
      if (typeMap_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(typeMapConverter);
      }
      return typeMap_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder, com.google.api.expr.v1alpha1.Type, com.google.api.expr.v1alpha1.Type.Builder>
        internalGetMutableTypeMap() {
      if (typeMap_ == null) {
        typeMap_ = new com.google.protobuf.MapFieldBuilder<>(typeMapConverter);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return typeMap_;
    }
    public int getTypeMapCount() {
      return internalGetTypeMap().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    @java.lang.Override
    public boolean containsTypeMap(
        long key) {

      return internalGetTypeMap().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getTypeMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> getTypeMap() {
      return getTypeMapMap();
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> getTypeMapMap() {
      return internalGetTypeMap().getImmutableMap();
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    @java.lang.Override
    public /* nullable */
com.google.api.expr.v1alpha1.Type getTypeMapOrDefault(
        long key,
        /* nullable */
com.google.api.expr.v1alpha1.Type defaultValue) {

      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder> map = internalGetMutableTypeMap().ensureBuilderMap();
      return map.containsKey(key) ? typeMapConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Type getTypeMapOrThrow(
        long key) {

      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder> map = internalGetMutableTypeMap().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return typeMapConverter.build(map.get(key));
    }
    public Builder clearTypeMap() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableTypeMap().clear();
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    public Builder removeTypeMap(
        long key) {

      internalGetMutableTypeMap().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type>
        getMutableTypeMap() {
      bitField0_ |= 0x00000002;
      return internalGetMutableTypeMap().ensureMessageMap();
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    public Builder putTypeMap(
        long key,
        com.google.api.expr.v1alpha1.Type value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableTypeMap().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    public Builder putAllTypeMap(
        java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.Type> values) {
      for (java.util.Map.Entry<java.lang.Long, com.google.api.expr.v1alpha1.Type> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableTypeMap().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * A map from expression ids to types.
     *
     * Every expression node which has a type different than DYN has a mapping
     * here. If an expression has type DYN, it is omitted from this map to save
     * space.
     * </pre>
     *
     * <code>map&lt;int64, .google.api.expr.v1alpha1.Type&gt; type_map = 3;</code>
     */
    public com.google.api.expr.v1alpha1.Type.Builder putTypeMapBuilderIfAbsent(
        long key) {
      java.util.Map<java.lang.Long, com.google.api.expr.v1alpha1.TypeOrBuilder> builderMap = internalGetMutableTypeMap().ensureBuilderMap();
      com.google.api.expr.v1alpha1.TypeOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = com.google.api.expr.v1alpha1.Type.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof com.google.api.expr.v1alpha1.Type) {
        entry = ((com.google.api.expr.v1alpha1.Type) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (com.google.api.expr.v1alpha1.Type.Builder) entry;
    }

    private com.google.api.expr.v1alpha1.SourceInfo sourceInfo_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.api.expr.v1alpha1.SourceInfo, com.google.api.expr.v1alpha1.SourceInfo.Builder, com.google.api.expr.v1alpha1.SourceInfoOrBuilder> sourceInfoBuilder_;
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     * @return Whether the sourceInfo field is set.
     */
    public boolean hasSourceInfo() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     * @return The sourceInfo.
     */
    public com.google.api.expr.v1alpha1.SourceInfo getSourceInfo() {
      if (sourceInfoBuilder_ == null) {
        return sourceInfo_ == null ? com.google.api.expr.v1alpha1.SourceInfo.getDefaultInstance() : sourceInfo_;
      } else {
        return sourceInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public Builder setSourceInfo(com.google.api.expr.v1alpha1.SourceInfo value) {
      if (sourceInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sourceInfo_ = value;
      } else {
        sourceInfoBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public Builder setSourceInfo(
        com.google.api.expr.v1alpha1.SourceInfo.Builder builderForValue) {
      if (sourceInfoBuilder_ == null) {
        sourceInfo_ = builderForValue.build();
      } else {
        sourceInfoBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public Builder mergeSourceInfo(com.google.api.expr.v1alpha1.SourceInfo value) {
      if (sourceInfoBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          sourceInfo_ != null &&
          sourceInfo_ != com.google.api.expr.v1alpha1.SourceInfo.getDefaultInstance()) {
          getSourceInfoBuilder().mergeFrom(value);
        } else {
          sourceInfo_ = value;
        }
      } else {
        sourceInfoBuilder_.mergeFrom(value);
      }
      if (sourceInfo_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public Builder clearSourceInfo() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sourceInfo_ = null;
      if (sourceInfoBuilder_ != null) {
        sourceInfoBuilder_.dispose();
        sourceInfoBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public com.google.api.expr.v1alpha1.SourceInfo.Builder getSourceInfoBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getSourceInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    public com.google.api.expr.v1alpha1.SourceInfoOrBuilder getSourceInfoOrBuilder() {
      if (sourceInfoBuilder_ != null) {
        return sourceInfoBuilder_.getMessageOrBuilder();
      } else {
        return sourceInfo_ == null ?
            com.google.api.expr.v1alpha1.SourceInfo.getDefaultInstance() : sourceInfo_;
      }
    }
    /**
     * <pre>
     * The source info derived from input that generated the parsed `expr` and
     * any optimizations made during the type-checking pass.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.SourceInfo source_info = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.api.expr.v1alpha1.SourceInfo, com.google.api.expr.v1alpha1.SourceInfo.Builder, com.google.api.expr.v1alpha1.SourceInfoOrBuilder> 
        getSourceInfoFieldBuilder() {
      if (sourceInfoBuilder_ == null) {
        sourceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.api.expr.v1alpha1.SourceInfo, com.google.api.expr.v1alpha1.SourceInfo.Builder, com.google.api.expr.v1alpha1.SourceInfoOrBuilder>(
                getSourceInfo(),
                getParentForChildren(),
                isClean());
        sourceInfo_ = null;
      }
      return sourceInfoBuilder_;
    }

    private java.lang.Object exprVersion_ = "";
    /**
     * <pre>
     * The expr version indicates the major / minor version number of the `expr`
     * representation.
     *
     * The most common reason for a version change will be to indicate to the CEL
     * runtimes that transformations have been performed on the expr during static
     * analysis. In some cases, this will save the runtime the work of applying
     * the same or similar transformations prior to evaluation.
     * </pre>
     *
     * <code>string expr_version = 6;</code>
     * @return The exprVersion.
     */
    public java.lang.String getExprVersion() {
      java.lang.Object ref = exprVersion_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        exprVersion_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The expr version indicates the major / minor version number of the `expr`
     * representation.
     *
     * The most common reason for a version change will be to indicate to the CEL
     * runtimes that transformations have been performed on the expr during static
     * analysis. In some cases, this will save the runtime the work of applying
     * the same or similar transformations prior to evaluation.
     * </pre>
     *
     * <code>string expr_version = 6;</code>
     * @return The bytes for exprVersion.
     */
    public com.google.protobuf.ByteString
        getExprVersionBytes() {
      java.lang.Object ref = exprVersion_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        exprVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The expr version indicates the major / minor version number of the `expr`
     * representation.
     *
     * The most common reason for a version change will be to indicate to the CEL
     * runtimes that transformations have been performed on the expr during static
     * analysis. In some cases, this will save the runtime the work of applying
     * the same or similar transformations prior to evaluation.
     * </pre>
     *
     * <code>string expr_version = 6;</code>
     * @param value The exprVersion to set.
     * @return This builder for chaining.
     */
    public Builder setExprVersion(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      exprVersion_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The expr version indicates the major / minor version number of the `expr`
     * representation.
     *
     * The most common reason for a version change will be to indicate to the CEL
     * runtimes that transformations have been performed on the expr during static
     * analysis. In some cases, this will save the runtime the work of applying
     * the same or similar transformations prior to evaluation.
     * </pre>
     *
     * <code>string expr_version = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearExprVersion() {
      exprVersion_ = getDefaultInstance().getExprVersion();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The expr version indicates the major / minor version number of the `expr`
     * representation.
     *
     * The most common reason for a version change will be to indicate to the CEL
     * runtimes that transformations have been performed on the expr during static
     * analysis. In some cases, this will save the runtime the work of applying
     * the same or similar transformations prior to evaluation.
     * </pre>
     *
     * <code>string expr_version = 6;</code>
     * @param value The bytes for exprVersion to set.
     * @return This builder for chaining.
     */
    public Builder setExprVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      exprVersion_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.api.expr.v1alpha1.Expr expr_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.api.expr.v1alpha1.Expr, com.google.api.expr.v1alpha1.Expr.Builder, com.google.api.expr.v1alpha1.ExprOrBuilder> exprBuilder_;
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     * @return Whether the expr field is set.
     */
    public boolean hasExpr() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     * @return The expr.
     */
    public com.google.api.expr.v1alpha1.Expr getExpr() {
      if (exprBuilder_ == null) {
        return expr_ == null ? com.google.api.expr.v1alpha1.Expr.getDefaultInstance() : expr_;
      } else {
        return exprBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public Builder setExpr(com.google.api.expr.v1alpha1.Expr value) {
      if (exprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expr_ = value;
      } else {
        exprBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public Builder setExpr(
        com.google.api.expr.v1alpha1.Expr.Builder builderForValue) {
      if (exprBuilder_ == null) {
        expr_ = builderForValue.build();
      } else {
        exprBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public Builder mergeExpr(com.google.api.expr.v1alpha1.Expr value) {
      if (exprBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          expr_ != null &&
          expr_ != com.google.api.expr.v1alpha1.Expr.getDefaultInstance()) {
          getExprBuilder().mergeFrom(value);
        } else {
          expr_ = value;
        }
      } else {
        exprBuilder_.mergeFrom(value);
      }
      if (expr_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public Builder clearExpr() {
      bitField0_ = (bitField0_ & ~0x00000010);
      expr_ = null;
      if (exprBuilder_ != null) {
        exprBuilder_.dispose();
        exprBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public com.google.api.expr.v1alpha1.Expr.Builder getExprBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    public com.google.api.expr.v1alpha1.ExprOrBuilder getExprOrBuilder() {
      if (exprBuilder_ != null) {
        return exprBuilder_.getMessageOrBuilder();
      } else {
        return expr_ == null ?
            com.google.api.expr.v1alpha1.Expr.getDefaultInstance() : expr_;
      }
    }
    /**
     * <pre>
     * The checked expression. Semantically equivalent to the parsed `expr`, but
     * may have structural differences.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Expr expr = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.api.expr.v1alpha1.Expr, com.google.api.expr.v1alpha1.Expr.Builder, com.google.api.expr.v1alpha1.ExprOrBuilder> 
        getExprFieldBuilder() {
      if (exprBuilder_ == null) {
        exprBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.api.expr.v1alpha1.Expr, com.google.api.expr.v1alpha1.Expr.Builder, com.google.api.expr.v1alpha1.ExprOrBuilder>(
                getExpr(),
                getParentForChildren(),
                isClean());
        expr_ = null;
      }
      return exprBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.CheckedExpr)
  }

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.CheckedExpr)
  private static final com.google.api.expr.v1alpha1.CheckedExpr DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.expr.v1alpha1.CheckedExpr();
  }

  public static com.google.api.expr.v1alpha1.CheckedExpr getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckedExpr>
      PARSER = new com.google.protobuf.AbstractParser<CheckedExpr>() {
    @java.lang.Override
    public CheckedExpr parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckedExpr> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckedExpr> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.api.expr.v1alpha1.CheckedExpr getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

